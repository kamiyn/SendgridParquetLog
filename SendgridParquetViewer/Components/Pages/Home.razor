@page "/"
@rendermode InteractiveServer
@using Microsoft.FluentUI.AspNetCore.Components
@using SendgridParquetViewer.Models
@using SendgridParquetViewer.Services
@inject DuckDbService DuckDbService

<PageTitle>SendGrid Events Viewer</PageTitle>

<h1>SendGrid Events Viewer</h1>

<div style="padding: 20px; background-color: #f8f9fa; border-radius: 8px; margin-bottom: 20px;">
    <h3>検索条件</h3>
    
    <!-- Search Form with Flow Layout -->
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" Style="gap: 20px; align-items: flex-start;">
        
        <!-- Email Address Field -->
        <div style="min-width: 250px;">
            <FluentTextField @bind-Value="selectedEmail" @oninput="OnInputChange" Label="メールアドレス（オプション）" Style="width: 100%;" Placeholder="example@domain.com" />
        </div>
        
        <!-- Date Selection Mode -->
        <div style="min-width: 250px;">
            <FluentLabel>日付の扱い</FluentLabel>
            <FluentRadioGroup @bind-Value="dateSelectionMode" @onchange="OnDateSelectionModeChange" Style="margin-top: 5px;">
                <FluentRadio Value="@DateSelectionMode.YearMonth">年月のみ使用（日付は無視）</FluentRadio>
                <FluentRadio Value="@DateSelectionMode.YearMonthDay">年月日すべて使用</FluentRadio>
            </FluentRadioGroup>
        </div>
        
        <!-- Date Picker - Always Visible -->
        <div style="min-width: 200px;">
            <FluentDatePicker @bind-Value="selectedDate" @oninput="OnInputChange" Label="日付選択" Style="width: 100%;" />
            @if (dateSelectionMode == DateSelectionMode.YearMonth)
            {
                <small style="color: #666; margin-top: 5px; display: block;">※ 日付部分は検索で無視されます</small>
            }
        </div>
        
        <!-- Search Button -->
        <div style="margin-top: 25px;">
            <FluentButton Appearance="Appearance.Accent" OnClick="SearchAsync">検索</FluentButton>
        </div>
        
    </FluentStack>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <FluentMessageBar Intent="MessageIntent.Error" Style="margin-bottom: 20px;">
        <div>
            <strong>エラー:</strong> @errorMessage
        </div>
    </FluentMessageBar>
}

@if (isLoading)
{
    <FluentProgress />
    <p>データを検索中...</p>
}
else if (sendGridEvents.Any())
{
    <div style="margin-top: 10px;">
        <p>検索結果: @sendGridEvents.Count 件</p>
        
        <FluentDataGrid Items="@sendGridEvents.AsQueryable()" Pagination="@pagination">
            <PropertyColumn Property="@(e => e.Timestamp)" Title="タイムスタンプ" Format="yyyy-MM-dd HH:mm:ss" Sortable="true" />
            <PropertyColumn Property="@(e => e.Email)" Title="メールアドレス" Sortable="true" />
            <PropertyColumn Property="@(e => e.Event)" Title="イベント" Sortable="true" />
            <PropertyColumn Property="@(e => e.Category)" Title="カテゴリ" Sortable="true" />
            <PropertyColumn Property="@(e => e.Reason)" Title="理由" />
            <PropertyColumn Property="@(e => e.Status)" Title="ステータス" />
            <PropertyColumn Property="@(e => e.Response)" Title="レスポンス" />
            <PropertyColumn Property="@(e => e.MarketingCampaignName)" Title="キャンペーン名" Sortable="true" />
            <PropertyColumn Property="@(e => e.Url)" Title="URL" />
            <PropertyColumn Property="@(e => e.UserAgent)" Title="ユーザーエージェント" />
            <PropertyColumn Property="@(e => e.Ip)" Title="IPアドレス" />
        </FluentDataGrid>
        
        <FluentPaginator State="@pagination" />
    </div>
}
else if (hasSearched)
{
    <p>検索結果が見つかりませんでした。</p>
}

@code {
    // Enum for date selection mode
    public enum DateSelectionMode
    {
        YearMonth,
        YearMonthDay
    }
    
    private IList<SendGridEvent> sendGridEvents = [];
    private bool isLoading = false;
    private bool hasSearched = false;
    private string errorMessage = "";
    
    // Search parameters
    private string selectedEmail = "";
    private DateSelectionMode dateSelectionMode = DateSelectionMode.YearMonth;
    private DateTime? selectedDate = DateTime.Now;
    
    private PaginationState pagination = new PaginationState { ItemsPerPage = 50 };

    private void OnInputChange()
    {
        // Reset search state when any input changes
        hasSearched = false;
        errorMessage = "";
    }
    
    private void OnDateSelectionModeChange()
    {
        // Reset search state when date selection mode changes
        OnInputChange();
    }

    private async Task SearchAsync()
    {
        // Clear previous error message
        errorMessage = "";
        
        // Determine which search method to use based on input state
        Func<Task<IList<SendGridEvent>>>? searchFunc = DetermineSearchMethod();
        
        if (searchFunc != null)
        {
            await ExecuteSearchAsync(searchFunc);
        }
    }

    private Func<Task<IList<SendGridEvent>>> DetermineSearchMethod()
    {
        bool hasEmail = !string.IsNullOrWhiteSpace(selectedEmail);
        bool hasDate = selectedDate.HasValue;

        return (hasEmail, hasDate, dateSelectionMode) switch
        {
            // Email + Date search (Year-Month mode - ignore day)
            (true, true, DateSelectionMode.YearMonth) => async () => await DuckDbService.GetEventsByEmailAndMonthAsync(
                selectedEmail!, selectedDate!.Value.Year, selectedDate!.Value.Month),
            
            // Email + Date search (Year-Month-Day mode - use full date for month search)
            (true, true, DateSelectionMode.YearMonthDay) => async () => await DuckDbService.GetEventsByEmailAndMonthAsync(
                selectedEmail!, selectedDate!.Value.Year, selectedDate!.Value.Month),
            
            // Date search only (Year-Month-Day mode - use full date)
            (false, true, DateSelectionMode.YearMonthDay) => async () => await DuckDbService.GetEventsByDateAsync(
                selectedDate!.Value.Year, selectedDate!.Value.Month, selectedDate!.Value.Day),
            
            // Date search only (Year-Month mode - ignore day)
            (false, true, DateSelectionMode.YearMonth) => async () => await DuckDbService.GetEventsByMonthAsync(
                selectedDate!.Value.Year, selectedDate!.Value.Month, 1000),
            
            // No valid search criteria
            _ => HandleInvalidSearchCriteria()
        };
    }

    private Func<Task<IList<SendGridEvent>>> HandleInvalidSearchCriteria()
    {
        errorMessage = "検索条件を指定してください: 日付を選択し、必要に応じてメールアドレスを入力してください";
        return () => Task.FromResult<IList<SendGridEvent>>([]);
    }

    private async Task ExecuteSearchAsync(Func<Task<IList<SendGridEvent>>> searchFunc)
    {
        isLoading = true;
        sendGridEvents = [];
        try
        {
            sendGridEvents = await searchFunc();
        }
        catch (Exception ex)
        {
            errorMessage = $"検索中にエラーが発生しました: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            hasSearched = true;
            StateHasChanged(); // Force UI update
        }
    }
}
