@page "/"
@rendermode InteractiveServer
@attribute [Authorize]
@using SendgridParquetViewer.Models
@using SendgridParquetViewer.Services
@using ZLogger
@inject TimeProvider TimeProvider
@inject ILogger<Home> Logger
@inject IJSRuntime JsRuntime
@inject S3StorageService S3StorageService
@implements IAsyncDisposable

<PageTitle>SendGrid Events Viewer</PageTitle>

<h1>SendGrid Events Viewer</h1>

<div style="padding: 20px; background-color: #f8f9fa; border-radius: 8px; margin-bottom: 20px;">
    <h3>検索条件</h3>

    <!-- Search Form with Flow Layout -->
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" Style="gap: 20px; align-items: flex-start;">

        <!-- Email Address Field -->
        <div style="min-width: 250px;">
            <FluentTextField @bind-Value="_selectedEmail" @oninput="OnInputChange" @onkeydown="OnEmailKeyDown" Label="email（LIKE句）" Style="width: 100%;" Placeholder="example@domain.com" />
        </div>

        <!-- SG Template ID Field -->
        <div style="min-width: 250px;">
            <FluentTextField @bind-Value="_selectedSgTemplateId" @oninput="OnInputChange" Label="sg_template_id（完全一致）" Style="width: 100%;" Placeholder="d-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" />
        </div>

        <!-- Event Type Selection -->
        <div style="min-width: 200px;">
            <FluentLabel>イベントタイプ</FluentLabel>
            <FluentSelect TOption="string" @bind-Value="_selectedEventType" @onchange="OnEventTypeChange" Style="width: 100%; margin-top: 5px;">
                @foreach (var eventType in SendGridEventTypes.AllEventTypes)
                {
                    <FluentOption TOption="string" Value="@eventType.Value">@eventType.Display</FluentOption>
                }
            </FluentSelect>
        </div>
        <div style="min-width: 200px;">
            <FluentDatePicker @bind-Value="_selectedDate" @oninput="OnInputChange" Label="日付選択" Style="width: 100%;" />
            @if (_dateSelectionMode == DateSelectionMode.YearMonth)
            {
                <small style="color: #666; margin-top: 5px; display: block;">※ 日付部分は検索で無視されます</small>
            }
        </div>

        @if (_dateSelectionMode == DateSelectionMode.YearMonthDay)
        {
            <!-- Hour Selection (Optional) -->
            <div style="min-width: 150px;">
                <FluentLabel>時間</FluentLabel>
                <FluentSelect TOption="string" @bind-Value="_selectedHourString" @onchange="OnHourSelectionChange" Style="width: 100%; margin-top: 5px;">
                    <FluentOption TOption="string" Value="">全時間</FluentOption>
                    @for (int i = 0; i < 24; i++)
                    {
                        var hour = i;
                        <FluentOption TOption="string" Value="@hour.ToString()">@($"{hour:D2}:00 - {hour:D2}:59")</FluentOption>
                    }
                </FluentSelect>
            </div>
        }

        <!-- Search Button -->
        <div style="margin-top: 25px;">
            <FluentButton Appearance="Appearance.Accent" OnClick="RunQueryAsync" disabled="@_isExecuting">
                @(_isExecuting ? "Running..." : "検索")
            </FluentButton>
        </div>

    </FluentStack>
</div>

@* 検索結果 *@
<div class="mt-3" @ref="_resultHost"></div>

@code {
    // Enum for date selection mode
    public enum DateSelectionMode
    {
        YearMonth,
        YearMonthDay
    }

    private CancellationTokenSource _cts = new CancellationTokenSource();
    private bool _isExecuting;
    private ElementReference _resultHost;
    private IJSObjectReference? _resultModule;
    private IJSObjectReference? _resultApp;

    // Search parameters
    private DateSelectionMode _dateSelectionMode = DateSelectionMode.YearMonthDay;
    private DateTime? _selectedDate = DateTime.UnixEpoch; // FluentDatePicker に bind するときは nullable でなければならない
    private string _selectedHourString = "";
    private int? SelectedHour => int.TryParse(_selectedHourString, out int v) ? v : null;

    private string _selectedEmail = "";
    private string _selectedEventType = SendGridEventTypes.Delivered;
    private string _selectedSgTemplateId = "";

    protected override async Task OnInitializedAsync()
    {
        _selectedDate = TimeProvider.GetUtcNow().ToJst().AddDays(-3).DateTime;
        await base.OnInitializedAsync();
    }

    private void OnInputChange()
    {
        // Reset search state when any input changes
    }

    private void OnHourSelectionChange() => OnInputChange();

    private void OnEventTypeChange() => OnInputChange();

    private async Task OnEmailKeyDown(KeyboardEventArgs args)
    {
        if (!string.Equals(args.Key, "Enter", StringComparison.OrdinalIgnoreCase))
        {
            return;
        }

        if (_isExecuting)
        {
            return;
        }

        await RunQueryAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await EnsureResultAppAsync();
        }
    }

    private async ValueTask<IJSObjectReference?> EnsureResultAppAsync()
    {
        if (_resultApp is not null)
        {
            return _resultApp;
        }

        if (_resultModule is null)
        {
            Logger.ZLogDebug($"JsRuntime.InvokeAsync import ./duckdb/duckdb-browser-bundle.js");
            _resultModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./duckdb/duckdb-browser-bundle.js");
        }

        var options = new DuckDbWasmOptions();
        var config = new
        {
            bundleBasePath = options.BundleBasePath,
            mainModule = options.MainModule,
            mainWorker = options.MainWorker,
            moduleLoader = options.ModuleLoader,
            pthreadWorker = string.IsNullOrWhiteSpace(options.PthreadWorker) ? null : options.PthreadWorker
        };

        Logger.ZLogDebug($"JsRuntime.InvokeAsync createResultApp");
        _resultApp = await _resultModule.InvokeAsync<IJSObjectReference>("createResultApp", _resultHost, config);
        return _resultApp;
    }

    private CancellationToken RenewCancellationToken()
    {
        var previous = _cts;
        _cts = new CancellationTokenSource();

        try
        {
            previous.Cancel();
        }
        finally
        {
            previous.Dispose();
        }

        return _cts.Token;
    }

    private async Task RunQueryAsync()
    {
        var resultApp = await EnsureResultAppAsync();
        if (resultApp is null)
        {
            return;
        }

        _isExecuting = true;
        StateHasChanged();

        var cancellationToken = RenewCancellationToken();

        IReadOnlyCollection<string> parquetUrls;
        try
        {
            parquetUrls = await GetParquetUrlsAsync(cancellationToken);
        }
        catch (OperationCanceledException)
        {
            return;
        }

        var condition = new SearchCondition
        {
            Email = _selectedEmail,
            EventType = _selectedEventType,
            SgTemplateId = _selectedSgTemplateId,
            ParquetUrls = parquetUrls,
        };

        try
        {
            if (!cancellationToken.IsCancellationRequested)
            {
                await resultApp.InvokeVoidAsync("runQuery", cancellationToken, condition);
            }
        }
        finally
        {
            _isExecuting = false;
        }
    }

    record struct YearMonthDayOptional(int? Year, int? Month, int? Day, int? Hour);

    /// <summary>
    /// 対象日・時間にあるファイル一覧の取得
    /// </summary>
    /// <returns></returns>
    private async Task<IReadOnlyCollection<string>> GetParquetUrlsAsync(CancellationToken ct)
    {
        var ymd = new YearMonthDayOptional(_selectedDate?.Year, _selectedDate?.Month, _selectedDate?.Day, SelectedHour);
        var s3CompactionPrefix = SendGridPathUtility.GetS3CompactionPrefix(ymd.Year, ymd.Month, ymd.Day, ymd.Hour);
        var keys = await S3StorageService.ListFilesAsync(s3CompactionPrefix, ct);
        var pathPrefix = S3PresigningTransformer.PathPrefix;
        return keys.Select(x => $"{pathPrefix}/{x}").ToArray();
    }

    public async ValueTask DisposeAsync()
    {
        if (!_cts.IsCancellationRequested)
        {
            _cts.Cancel();
        }
        _cts.Dispose();

        if (_resultApp is not null)
        {
            try
            {
                await _resultApp.InvokeVoidAsync("unmount");
            }
            catch (OperationCanceledException) { }
            catch (JSDisconnectedException) { }

            try
            {
                await _resultApp.DisposeAsync();
            }
            catch (OperationCanceledException) { }
            catch (JSDisconnectedException) { }
        }

        if (_resultModule is not null)
        {
            try
            {
                await _resultModule.DisposeAsync();
            }
            catch (OperationCanceledException) { }
            catch (JSDisconnectedException) { }
        }
    }
}
