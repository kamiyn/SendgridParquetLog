@page "/"
@rendermode InteractiveServer
@attribute [Authorize]
@using SendgridParquet.Shared
@using SendgridParquetViewer.Models
@inject DuckDbService DuckDbService
@inject TimeProvider TimeProvider
@inject S3StorageService S3StorageService
@inject ILogger<Home> Logger

<PageTitle>SendGrid Events Viewer</PageTitle>

<h1>SendGrid Events Viewer</h1>

<div style="padding: 20px; background-color: #f8f9fa; border-radius: 8px; margin-bottom: 20px;">
    <h3>検索条件</h3>
    
    <!-- Search Form with Flow Layout -->
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" Style="gap: 20px; align-items: flex-start;">
        
        <!-- Email Address Field -->
        <div style="min-width: 250px;">
            <FluentTextField @bind-Value="_selectedEmail" @oninput="OnInputChange" Label="email（LIKE句）" Style="width: 100%;" Placeholder="example@domain.com" />
        </div>
        
        <!-- Date Selection Mode -->
        <div style="min-width: 250px;">
            <FluentLabel>日付の扱い</FluentLabel>
            <FluentRadioGroup @bind-Value="_dateSelectionMode" @onchange="OnDateSelectionModeChange" Style="margin-top: 5px;">
                <FluentRadio Value="@DateSelectionMode.YearMonth">年月のみ使用（日付は無視）</FluentRadio>
                <FluentRadio Value="@DateSelectionMode.YearMonthDay">年月日すべて使用</FluentRadio>
            </FluentRadioGroup>
        </div>
        
        <!-- Date Picker - Always Visible -->
        <div style="min-width: 200px;">
            <FluentDatePicker @bind-Value="_selectedDate" @oninput="OnInputChange" Label="日付選択" Style="width: 100%;" />
            @if (_dateSelectionMode == DateSelectionMode.YearMonth)
            {
                <small style="color: #666; margin-top: 5px; display: block;">※ 日付部分は検索で無視されます</small>
            }
        </div>
        
        <!-- Search Button -->
        <div style="margin-top: 25px;">
            <FluentButton Appearance="Appearance.Accent" OnClick="SearchAsync">検索</FluentButton>
        </div>
        
    </FluentStack>
</div>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <FluentMessageBar Intent="MessageIntent.Error" Style="margin-bottom: 20px;">
        <div>
            <strong>エラー:</strong> @_errorMessage
        </div>
    </FluentMessageBar>
}

@if (_isLoading)
{
    <FluentProgress />
    <p>データを検索中...</p>
}
else if (_sendGridEvents.Any())
{
    <div style="margin-top: 10px;">
        <p>検索結果: @_sendGridEvents.Count() 件</p>
        
        <FluentDataGrid Items="@_sendGridEvents" Pagination="@_pagination">
            <PropertyColumn Property="@(e => e.Timestamp)" Title="タイムスタンプ" Format="yyyy-MM-dd HH:mm:ss" Sortable="true" />
            <PropertyColumn Property="@(e => e.Email)" Title="メールアドレス" Sortable="true" />
            <PropertyColumn Property="@(e => e.Event)" Title="イベント" Sortable="true" />
            <PropertyColumn Property="@(e => e.Category)" Title="カテゴリ" Sortable="true" />
            <PropertyColumn Property="@(e => e.Reason)" Title="理由" />
            <PropertyColumn Property="@(e => e.Status)" Title="ステータス" />
            <PropertyColumn Property="@(e => e.Response)" Title="レスポンス" />
            <PropertyColumn Property="@(e => e.MarketingCampaignName)" Title="キャンペーン名" Sortable="true" />
            <PropertyColumn Property="@(e => e.Url)" Title="URL" />
            <PropertyColumn Property="@(e => e.UserAgent)" Title="ユーザーエージェント" />
            <PropertyColumn Property="@(e => e.Ip)" Title="IPアドレス" />
        </FluentDataGrid>
        
        <FluentPaginator State="@_pagination" />
    </div>
}
else if (_hasSearched)
{
    <p>検索結果が見つかりませんでした。</p>
}

@code {
    // Enum for date selection mode
    public enum DateSelectionMode
    {
        YearMonth,
        YearMonthDay
    }

    private IQueryable<SendGridEvent> _sendGridEvents = Array.Empty<SendGridEvent>().AsQueryable();
    private bool _isLoading;
    private bool _hasSearched;
    private string _errorMessage = "";

    // Search parameters
    private string _selectedEmail = "";
    private DateSelectionMode _dateSelectionMode = DateSelectionMode.YearMonth;
    private DateTime? _selectedDate;

    private readonly PaginationState _pagination = new PaginationState { ItemsPerPage = 50 };

    protected override async Task OnInitializedAsync()
    {
        _selectedDate = TimeProvider.GetLocalNow().DateTime;
        await base.OnInitializedAsync();
    }

    private void OnInputChange()
    {
        // Reset search state when any input changes
        _hasSearched = false;
        _errorMessage = "";
    }

    private void OnDateSelectionModeChange()
    {
        // Reset search state when date selection mode changes
        OnInputChange();
    }

    private async Task SearchAsync()
    {
        _errorMessage = "";
        _isLoading = true;
        _sendGridEvents = Array.Empty<SendGridEvent>().AsQueryable();
        try
        {
            var ymd = _dateSelectionMode switch
            {
                DateSelectionMode.YearMonth => new YearMonthDayOptional(_selectedDate?.Year, _selectedDate?.Month, null),
                DateSelectionMode.YearMonthDay => new YearMonthDayOptional(_selectedDate?.Year, _selectedDate?.Month, _selectedDate?.Day),
                _ => throw new ArgumentOutOfRangeException()
            };
            _sendGridEvents = (await ExecuteSearchAsync(ymd, CancellationToken.None)).AsQueryable();
        }
        catch (Exception ex)
        {
            _errorMessage = $"検索中にエラーが発生しました: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            _hasSearched = true;
            StateHasChanged(); // Force UI update
        }
    }

    record struct YearMonthDayOptional(int? Year, int? Month, int? Day);

    private async Task<IEnumerable<SendGridEvent>> ExecuteSearchAsync(YearMonthDayOptional ymd, CancellationToken ct)
    {
        const int limit = 1000;
        var now = TimeProvider.GetUtcNow();

        async ValueTask<IList<SendGridEvent>> GetFromCompactionFolder(){
            var prefix = SendGridPathUtility.GetS3CompactionPrefix(ymd.Year, ymd.Month, ymd.Day, null);
            var directories = await S3StorageService.ListDirectoriesAsync(prefix, now, ct);
            if (directories.Any())
            {
                var folder = SendGridPathUtility.GetS3CompactionWildcard(ymd.Year, ymd.Month, ymd.Day, null);
                var events = await DuckDbService.GetEventsByDateAsync(folder, _selectedEmail, limit, ct);
                Logger.LogDebug("Compaction count: {count}", events.Count);
                return events;
            }
            return [];
        }
        async ValueTask<IList<SendGridEvent>> GetFromNonCompactionFolder()
        {
            var prefix = SendGridPathUtility.GetS3NonCompactionPrefix(ymd.Year, ymd.Month, ymd.Day);
            var directories = await S3StorageService.ListDirectoriesAsync(prefix, now, ct);
            if (directories.Any())
            {
                var folder = SendGridPathUtility.GetS3NonCompactionWildcard(ymd.Year, ymd.Month, ymd.Day);
                var events = await DuckDbService.GetEventsByDateAsync(folder, _selectedEmail, limit, ct);
                Logger.LogDebug("NonCompaction count: {count}", events.Count);
                return events;
            }
            return [];
        }

        return (await GetFromCompactionFolder()).Concat(await GetFromNonCompactionFolder());
    }
}
