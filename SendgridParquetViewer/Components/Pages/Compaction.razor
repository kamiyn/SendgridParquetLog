@page "/compaction"
@rendermode InteractiveServer
@using SendgridParquetViewer.Models
@using SendgridParquetViewer.Services
@inject ILogger<Compaction> Logger
@inject CompactionService CompactionService

<PageTitle>Compaction Management</PageTitle>

<FluentCard class="main-card">
    <FluentHeader>
        <FluentSpacer />
        <FluentLabel Typo="Typography.PageTitle">Compaction Management</FluentLabel>
        <FluentSpacer />
    </FluentHeader>

    <p>Manage Parquet file compaction processes for SendGrid webhook data.</p>

    <FluentGrid>
        <FluentGridItem xs="12" md="6">
            <FluentCard>
                <FluentHeader>
                    <FluentLabel Typo="Typography.Subject">Current Status</FluentLabel>
                </FluentHeader>
                
                @if (_runStatus != null)
                {
                    <p>
                        <strong>Start Time:</strong> @_runStatus.StartTime.ToString("yyyy-MM-dd HH:mm:ss UTC")<br />
                        @if (_runStatus.EndTime.HasValue)
                        {
                            <strong>End Time:</strong> @_runStatus.EndTime.Value.ToString("yyyy-MM-dd HH:mm:ss UTC")<br />
                            <strong>Status:</strong> <FluentBadge BackgroundColor="var(--success)" Color="white">Completed</FluentBadge>
                        }
                        else
                        {
                            <strong>Status:</strong> <FluentBadge BackgroundColor="var(--accent-fill-rest)">Running</FluentBadge>
                            <br />
                            <strong>Completed Days:</strong> @_runStatus.CompletedDays / @_runStatus.TargetDays.Count
                            @if (_runStatus.CurrentDay.HasValue)
                            {
                                <br />
                                <strong>Current Day:</strong> @_runStatus.CurrentDay.Value
                                @if (_runStatus.CurrentDayTotalFiles.HasValue && _runStatus.CurrentDayProcessedFiles.HasValue)
                                {
                                    <br />
                                    <strong>Day Progress:</strong> @_runStatus.CurrentDayProcessedFiles / @_runStatus.CurrentDayTotalFiles
                                }
                            }
                            <br />
                            <strong>Output Files Created:</strong> @_runStatus.OutputFilesCreated
                            <br />
                            <small>Last Updated: @_runStatus.LastUpdated.ToString("yyyy-MM-dd HH:mm:ss UTC")</small>
                        }
                        <br />
                        <strong>Target Days:</strong> @_runStatus.TargetDays.Count<br />
                        <strong>Target Paths:</strong> @string.Join(", ", _runStatus.TargetPathPrefixes.Take(3))
                        @if (_runStatus.TargetPathPrefixes.Count > 3)
                        {
                            <text> and @(_runStatus.TargetPathPrefixes.Count - 3) more...</text>
                        }
                    </p>
                }
                else if (_isLoadingStatus)
                {
                    <FluentProgressRing />
                    <p>Loading status...</p>
                }
                else
                {
                    <p>No active compaction process found.</p>
                }

                <FluentButton Appearance="Appearance.Neutral" OnClick="RefreshStatus" Loading="_isLoadingStatus">
                    Refresh
                </FluentButton>
            </FluentCard>
        </FluentGridItem>

        <FluentGridItem xs="12" md="6">
            <FluentCard>
                <FluentHeader>
                    <FluentLabel Typo="Typography.Subject">Start New Compaction</FluentLabel>
                </FluentHeader>
                
                <p>Start a new compaction process. This will process all available non-compacted Parquet files.</p>

                <FluentButton Appearance="Appearance.Accent" 
                             OnClick="StartCompaction" 
                             Loading="_isStarting"
                             Disabled="@(_runStatus?.EndTime == null && _runStatus != null)">
                    Start Compaction
                </FluentButton>
            </FluentCard>
        </FluentGridItem>
    </FluentGrid>

    @if (!string.IsNullOrEmpty(_message))
    {
        <FluentMessageBar Intent="@_messageIntent" OnDismiss="() => message = string.Empty">
            @_message
        </FluentMessageBar>
    }
</FluentCard>

@code {
    private RunStatus? _runStatus;
    private bool _isLoadingStatus;
    private bool _isStarting;
    private string _message = string.Empty;
    private MessageIntent _messageIntent = MessageIntent.Info;
    private System.Threading.Timer? _pollTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
        EnsurePolling();
    }

    private async Task RefreshStatus()
    {
        _isLoadingStatus = true;
        try
        {
            _runStatus = await CompactionService.GetRunStatusAsync();
            EnsurePolling();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing compaction status");
            ShowMessage("Error refreshing status", MessageIntent.Error);
        }
        finally
        {
            _isLoadingStatus = false;
        }
    }

    private async Task StartCompaction()
    {
        _isStarting = true;
        try
        {
            var result = await CompactionService.StartCompactionAsync();
            if (result.CanStart)
            {
                ShowMessage($"Compaction started successfully at {result.StartTime}", MessageIntent.Success);
                await RefreshStatus();
            }
            else
            {
                ShowMessage($"Cannot start compaction: {result.Reason}", MessageIntent.Warning);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting compaction");
            ShowMessage("Error starting compaction", MessageIntent.Error);
        }
        finally
        {
            _isStarting = false;
        }
    }

    private void ShowMessage(string msg, MessageIntent intent)
    {
        _message = msg;
        _messageIntent = intent;
        StateHasChanged();
    }

    private void EnsurePolling()
    {
        // Start polling when running; stop when completed or no status
        bool shouldPoll = _runStatus != null && !_runStatus.EndTime.HasValue;
        if (shouldPoll && _pollTimer == null)
        {
            _pollTimer = new System.Threading.Timer(async _ =>
            {
                try
                {
                    await InvokeAsync(async () => await RefreshStatus());
                }
                catch {}
            }, null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(3));
        }
        else if (!shouldPoll && _pollTimer != null)
        {
            _pollTimer.Dispose();
            _pollTimer = null;
        }
    }

    public void Dispose()
    {
        _pollTimer?.Dispose();
        _pollTimer = null;
    }
}
